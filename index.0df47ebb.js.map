{"mappings":"AAAA,MAAMA,EAAYC,SAASC,cAAc,cACnCC,EAAMH,EAAUI,WAAW,MAC3BC,EAAYJ,SAASC,cAAc,cACnCI,EAAWL,SAASC,cAAc,gBAClCK,EAAYP,EAAUQ,MACtBC,EAAaT,EAAUU,OAO7B,IAGIC,EACAC,EAJAC,GAAU,EACVC,EAHa,GAIbC,EAAY,EAGZC,EAAQ,EACRC,EAAQ,CACV,CAAEC,EAAGC,IAAcC,EAAG,GACtB,CAAEF,EAAGC,GAAcC,EAAG,GACtB,CAAEF,EAAGC,GAAcC,EAAG,GACtB,CAAEF,EAZa,GAYAE,EAAG,GAClB,CAAEF,EAAG,EAAGE,EAAG,IAQb,SAASC,IACPR,GAAU,EACVR,EAAUiB,YAAcN,EACxBO,IACAC,IACAC,G,CAEF,SAASA,IACHZ,EACFa,YAAW,KAabvB,EAAIwB,UA/CkB,QAgDtBxB,EAAIyB,SAAS,EAAG,EAAGrB,EAAWE,GAZ1Be,IA2BN,WACE,MAAMK,EAAO,CACXX,EAAGD,EAAM,GAAGC,EAAIJ,EAChBM,EAAGH,EAAM,GAAGG,EAAIL,GAElBE,EAAMa,QAAQD,GACVZ,EAAM,GAAGC,IAAMP,GAASM,EAAM,GAAGG,IAAMR,GACzCI,GAAS,EACTX,EAAUiB,YAAcN,EACxBO,KAEAN,EAAMc,K,CArCJC,GAyCJ7B,EAAIwB,UA7Ea,aA8EjBxB,EAAI8B,YA5Ec,QA6ElBhB,EAAMiB,SAAQC,IACZhC,EAAIyB,SAASO,EAAUjB,EAAGiB,EAAUf,EA7EvB,OA8EbjB,EAAIiC,WAAWD,EAAUjB,EAAGiB,EAAUf,EA9EzB,MA8E+C,IAmChE,WACE,QAAQ,GACN,KAAKH,EAAM,GAAGC,EAAI,EAGlB,KAAKD,EAAM,GAAGC,GAAKX,EAGnB,KAAKU,EAAM,GAAGG,EAAI,EAGlB,KAAKH,EAAM,GAAGG,GAAKX,EACjBI,GAAU,EAGd,IAAK,IAAIwB,EAAI,EAAGA,EAAIpB,EAAMqB,OAAQD,IAC5BpB,EAAMoB,GAAGnB,GAAKD,EAAM,GAAGC,GAAKD,EAAMoB,GAAGjB,GAAKH,EAAM,GAAGG,IACrDP,GAAU,E,CA/FV0B,GACAd,GAAU,GACT,KAkGLtB,EAAIqC,KAAO,eACXrC,EAAIwB,UAAY,QAChBxB,EAAIsC,UAAY,SAChBtC,EAAIuC,SAAS,aAAcnC,EAAY,EAAGE,EAAa,GACvDI,GAAU,E,CA7FZ,SAASU,IACP,SAASoB,EAAWC,EAAKC,GAGvB,OAlDa,GAiDXC,KAAKC,OAAOD,KAAKE,UAAYH,EAAMD,GAAOA,GAjD/B,G,CAoDfjC,EAAQgC,EAAW,EAAGpC,EApDP,IAqDfK,EAAQ+B,EAAW,EAAGpC,EArDP,G,CAuDjB,SAASiB,IACPrB,EAAIwB,UA1DY,MA2DhBxB,EAAIyB,SAASjB,EAAOC,EAzDL,M,CAgBjBqC,OAAOC,iBAAiB,WAiExB,SAAyBC,GACvB,MAAMC,EAAaD,EAAEE,QAKfC,GAvFS,IAuFCvC,EACVwC,EAxFS,IAwFGxC,EACZyC,EAzFS,IAyFI1C,EACb2C,GA1FS,IA0FG3C,EAClB,QAAQ,GACN,KATW,IASNsC,IAAuBI,EAC1B1C,GA7FW,GA8FXC,EAAY,EACZ,MACF,KAVS,IAUJqC,IAAqBG,EACxBzC,EAAY,EACZC,GAlGW,GAmGX,MACF,KAhBY,IAgBPqC,IAAwBK,EAC3B3C,EArGW,GAsGXC,EAAY,EACZ,MACF,KAnBW,IAmBNqC,IAAuBE,EAC1BxC,EAAY,EACZC,EA1GW,G,IAiBjBT,EAAS4C,iBAAiB,SA4H1B,WACElC,EAAQ,EACRF,EA/Ie,GAgJfC,EAAY,EAEZE,EAAQ,CACN,CAAEC,EAAGC,IAAcC,EAAG,GACtB,CAAEF,EAAGC,GAAcC,EAAG,GACtB,CAAEF,EAAGC,GAAcC,EAAG,GACtB,CAAEF,EAtJW,GAsJEE,EAAG,GAClB,CAAEF,EAAG,EAAGE,EAAG,IAEbC,G,IAtIFA","sources":["src/index.js"],"sourcesContent":["const gameBoard = document.querySelector('#gameBoard');\nconst ctx = gameBoard.getContext('2d');\nconst scoreText = document.querySelector('#scoreText');\nconst resetBtn = document.querySelector('#resetButton');\nconst gameWidth = gameBoard.width;\nconst gameHeight = gameBoard.height;\nconst boardBackground = 'white';\nconst snakeColor = 'lightgreen';\nconst foodColor = 'red';\nconst snakeBorder = 'green';\nconst unitSize = 25;\n\nlet running = false;\nlet xVelocity = unitSize;\nlet yVelocity = 0;\nlet foodX;\nlet foodY;\nlet score = 0;\nlet snake = [\n  { x: unitSize * 4, y: 0 },\n  { x: unitSize * 3, y: 0 },\n  { x: unitSize * 2, y: 0 },\n  { x: unitSize, y: 0 },\n  { x: 0, y: 0 },\n];\n\nwindow.addEventListener('keydown', changeDirection);\nresetBtn.addEventListener('click', resetGame);\n\ngameStart();\n\nfunction gameStart() {\n  running = true;\n  scoreText.textContent = score;\n  createFood();\n  drawFood();\n  nextTick();\n}\nfunction nextTick() {\n  if (running) {\n    setTimeout(() => {\n      clearBoard();\n      drawFood();\n      moveSnake();\n      drawSnake();\n      checkGameOver();\n      nextTick();\n    }, 75);\n  } else {\n    displayGameOver();\n  }\n}\nfunction clearBoard() {\n  ctx.fillStyle = boardBackground;\n  ctx.fillRect(0, 0, gameWidth, gameHeight);\n}\nfunction createFood() {\n  function randomFood(min, max) {\n    const randNum =\n      Math.round((Math.random() * (max - min) - min) / unitSize) * unitSize;\n    return randNum;\n  }\n  foodX = randomFood(0, gameWidth - unitSize);\n  foodY = randomFood(0, gameWidth - unitSize);\n}\nfunction drawFood() {\n  ctx.fillStyle = foodColor;\n  ctx.fillRect(foodX, foodY, unitSize, unitSize);\n}\nfunction moveSnake() {\n  const head = {\n    x: snake[0].x + xVelocity,\n    y: snake[0].y + yVelocity,\n  };\n  snake.unshift(head);\n  if (snake[0].x === foodX && snake[0].y === foodY) {\n    score += 1;\n    scoreText.textContent = score;\n    createFood();\n  } else {\n    snake.pop();\n  }\n}\nfunction drawSnake() {\n  ctx.fillStyle = snakeColor;\n  ctx.strokeStyle = snakeBorder;\n  snake.forEach(snakePart => {\n    ctx.fillRect(snakePart.x, snakePart.y, unitSize, unitSize);\n    ctx.strokeRect(snakePart.x, snakePart.y, unitSize, unitSize);\n  });\n}\nfunction changeDirection(e) {\n  const keyPressed = e.keyCode;\n  const LEFT = 37;\n  const RIGHT = 39;\n  const DOWN = 40;\n  const UP = 38;\n  const goingUp = yVelocity == -unitSize;\n  const goingDown = yVelocity == unitSize;\n  const goingRight = xVelocity == unitSize;\n  const goingLeft = xVelocity == -unitSize;\n  switch (true) {\n    case keyPressed == LEFT && !goingRight:\n      xVelocity = -unitSize;\n      yVelocity = 0;\n      break;\n    case keyPressed == UP && !goingDown:\n      xVelocity = 0;\n      yVelocity = -unitSize;\n      break;\n    case keyPressed == RIGHT && !goingLeft:\n      xVelocity = unitSize;\n      yVelocity = 0;\n      break;\n    case keyPressed == DOWN && !goingUp:\n      xVelocity = 0;\n      yVelocity = unitSize;\n      break;\n\n    default:\n      break;\n  }\n}\nfunction checkGameOver() {\n  switch (true) {\n    case snake[0].x < 0:\n      running = false;\n      break;\n    case snake[0].x >= gameWidth:\n      running = false;\n      break;\n    case snake[0].y < 0:\n      running = false;\n      break;\n    case snake[0].y >= gameHeight:\n      running = false;\n      break;\n  }\n  for (let i = 1; i < snake.length; i++) {\n    if (snake[i].x == snake[0].x && snake[i].y == snake[0].y) {\n      running = false;\n    }\n  }\n}\nfunction displayGameOver() {\n  ctx.font = '50px MV Boli';\n  ctx.fillStyle = 'black';\n  ctx.textAlign = 'center';\n  ctx.fillText('GAME OVER!', gameWidth / 2, gameHeight / 2);\n  running = false;\n}\nfunction resetGame() {\n  score = 0;\n  xVelocity = unitSize;\n  yVelocity = 0;\n\n  snake = [\n    { x: unitSize * 4, y: 0 },\n    { x: unitSize * 3, y: 0 },\n    { x: unitSize * 2, y: 0 },\n    { x: unitSize, y: 0 },\n    { x: 0, y: 0 },\n  ];\n  gameStart();\n}\n"],"names":["$1f0dc3b9307be026$var$gameBoard","document","querySelector","$1f0dc3b9307be026$var$ctx","getContext","$1f0dc3b9307be026$var$scoreText","$1f0dc3b9307be026$var$resetBtn","$1f0dc3b9307be026$var$gameWidth","width","$1f0dc3b9307be026$var$gameHeight","height","$1f0dc3b9307be026$var$foodX","$1f0dc3b9307be026$var$foodY","$1f0dc3b9307be026$var$running","$1f0dc3b9307be026$var$xVelocity","$1f0dc3b9307be026$var$yVelocity","$1f0dc3b9307be026$var$score","$1f0dc3b9307be026$var$snake","x","$1f0dc3b9307be026$var$unitSize","y","$1f0dc3b9307be026$var$gameStart","textContent","$1f0dc3b9307be026$var$createFood","$1f0dc3b9307be026$var$drawFood","$1f0dc3b9307be026$var$nextTick","setTimeout","fillStyle","fillRect","head","unshift","pop","$1f0dc3b9307be026$var$moveSnake","strokeStyle","forEach","snakePart","strokeRect","i","length","$1f0dc3b9307be026$var$checkGameOver","font","textAlign","fillText","randomFood","min","max","Math","round","random","window","addEventListener","e","keyPressed","keyCode","goingUp","goingDown","goingRight","goingLeft"],"version":3,"file":"index.0df47ebb.js.map"}