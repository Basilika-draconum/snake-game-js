{"mappings":"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","sources":["src/index.js"],"sourcesContent":["const gameBoard = document.querySelector('#gameBoard');\nconst ctx = gameBoard.getContext('2d');\nconst scoreText = document.querySelector('#scoreText');\nconst resetBtn = document.querySelector('#resetButton');\nconst gameWidth = gameBoard.width;\nconst gameHeight = gameBoard.height;\nconst boardBackground = 'white';\nconst snakeColor = 'lightgreen';\nconst foodColor = 'red';\nconst snakeBorder = 'green';\nconst unitSize = 25;\n\nlet running = false;\nlet xVelocity = unitSize;\nlet yVelocity = 0;\nlet foodX;\nlet foodY;\nlet score = 0;\nlet snake = [\n  { x: unitSize * 4, y: 0 },\n  { x: unitSize * 3, y: 0 },\n  { x: unitSize * 2, y: 0 },\n  { x: unitSize, y: 0 },\n  { x: 0, y: 0 },\n];\n\nwindow.addEventListener('keydown', changeDirection);\nresetBtn.addEventListener('click', resetGame);\n\ngameStart();\n\nfunction gameStart() {\n  running = true;\n  scoreText.textContent = score;\n  createFood();\n  drawFood();\n  nextTick();\n}\nfunction nextTick() {\n  if (running) {\n    setTimeout(() => {\n      clearBoard();\n      drawFood();\n      moveSnake();\n      drawSnake();\n      checkGameOver();\n      nextTick();\n    }, 75);\n  } else {\n    displayGameOver();\n  }\n}\nfunction clearBoard() {\n  ctx.fillStyle = boardBackground;\n  ctx.fillRect(0, 0, gameWidth, gameHeight);\n}\nfunction createFood() {\n  function randomFood(min, max) {\n    const randNum =\n      Math.round((Math.random() * (max - min) - min) / unitSize) * unitSize;\n    return randNum;\n  }\n  foodX = randomFood(0, gameWidth - unitSize);\n  foodY = randomFood(0, gameWidth - unitSize);\n}\nfunction drawFood() {\n  ctx.fillStyle = foodColor;\n  ctx.fillRect(foodX, foodY, unitSize, unitSize);\n}\nfunction moveSnake() {\n  const head = {\n    x: snake[0].x + xVelocity,\n    y: snake[0].y + yVelocity,\n  };\n  snake.unshift(head);\n  if (snake[0].x === foodX && snake[0].y === foodY) {\n    score += 1;\n    scoreText.textContent = score;\n    createFood();\n  } else {\n    snake.pop();\n  }\n}\nfunction drawSnake() {\n  ctx.fillStyle = snakeColor;\n  ctx.strokeStyle = snakeBorder;\n  snake.forEach(snakePart => {\n    ctx.fillRect(snakePart.x, snakePart.y, unitSize, unitSize);\n    ctx.strokeRect(snakePart.x, snakePart.y, unitSize, unitSize);\n  });\n}\nfunction changeDirection(e) {\n  const keyPressed = e.keyCode;\n  const LEFT = 37;\n  const RIGHT = 39;\n  const DOWN = 40;\n  const UP = 38;\n  const goingUp = yVelocity == -unitSize;\n  const goingDown = yVelocity == unitSize;\n  const goingRight = xVelocity == unitSize;\n  const goingLeft = xVelocity == -unitSize;\n  switch (true) {\n    case keyPressed == LEFT && !goingRight:\n      xVelocity = -unitSize;\n      yVelocity = 0;\n      break;\n    case keyPressed == UP && !goingDown:\n      xVelocity = 0;\n      yVelocity = -unitSize;\n      break;\n    case keyPressed == RIGHT && !goingLeft:\n      xVelocity = unitSize;\n      yVelocity = 0;\n      break;\n    case keyPressed == DOWN && !goingUp:\n      xVelocity = 0;\n      yVelocity = unitSize;\n      break;\n\n    default:\n      break;\n  }\n}\nfunction checkGameOver() {\n  switch (true) {\n    case snake[0].x < 0:\n      running = false;\n      break;\n    case snake[0].x >= gameWidth:\n      running = false;\n      break;\n    case snake[0].y < 0:\n      running = false;\n      break;\n    case snake[0].y >= gameHeight:\n      running = false;\n      break;\n  }\n  for (let i = 1; i < snake.length; i++) {\n    if (snake[i].x == snake[0].x && snake[i].y == snake[0].y) {\n      running = false;\n    }\n  }\n}\nfunction displayGameOver() {\n  ctx.font = '50px MV Boli';\n  ctx.fillStyle = 'black';\n  ctx.textAlign = 'center';\n  ctx.fillText('GAME OVER!', gameWidth / 2, gameHeight / 2);\n  running = false;\n}\nfunction resetGame() {\n  score = 0;\n  xVelocity = unitSize;\n  yVelocity = 0;\n\n  snake = [\n    { x: unitSize * 4, y: 0 },\n    { x: unitSize * 3, y: 0 },\n    { x: unitSize * 2, y: 0 },\n    { x: unitSize, y: 0 },\n    { x: 0, y: 0 },\n  ];\n  gameStart();\n}\n"],"names":["$b8f9b7833fa37166$var$foodX","$b8f9b7833fa37166$var$foodY","$b8f9b7833fa37166$var$gameBoard","document","querySelector","$b8f9b7833fa37166$var$ctx","getContext","$b8f9b7833fa37166$var$scoreText","$b8f9b7833fa37166$var$resetBtn","$b8f9b7833fa37166$var$gameWidth","width","$b8f9b7833fa37166$var$gameHeight","height","$b8f9b7833fa37166$var$boardBackground","$b8f9b7833fa37166$var$snakeColor","$b8f9b7833fa37166$var$snakeBorder","$b8f9b7833fa37166$var$unitSize","$b8f9b7833fa37166$var$running","$b8f9b7833fa37166$var$xVelocity","$b8f9b7833fa37166$var$yVelocity","$b8f9b7833fa37166$var$score","$b8f9b7833fa37166$var$snake","x","y","$b8f9b7833fa37166$var$gameStart","textContent","$b8f9b7833fa37166$var$createFood","$b8f9b7833fa37166$var$drawFood","$b8f9b7833fa37166$var$nextTick","setTimeout","head","fillStyle","fillRect","unshift","pop","strokeStyle","forEach","snakePart","strokeRect","i","length","$b8f9b7833fa37166$var$checkGameOver","font","textAlign","fillText","randomFood","min","max","Math","round","random","window","addEventListener","e","keyPressed","keyCode","goingUp","goingDown","goingRight","goingLeft"],"version":3,"file":"index.44686e1d.js.map"}